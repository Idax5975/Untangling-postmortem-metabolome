plot_pca <- function(feature_matrix, metadata, color_label="rowid", palette = "Spectral", tech_rep = "rowid", panels = 3) {
  
  # Feature matrix --> features on columns and samples on rows. Only features, no metadata
  # metadata --> only metadata. used for coloring
  # palette --> palette used for coloring
  # tech_rep --> if the data contain techical replicates. If the replicates are duplicates: c(1, 1, 2, 2, etc,) - i.e., one value per group
  
  tmp1 <- metadata
  tmp2 <- feature_matrix
  if (!"rowid"%in%colnames(tmp1)){tmp1 <- tmp1 %>% tibble::rowid_to_column()}
  print(tmp1)
  r    <- prcomp(x = tmp2, retx = TRUE, center = T, scale = T, rank. = panels*2)
  
  variance_explained <- summary(r)$importance[2,1:(panels*2)]
  variance_explained <- round(variance_explained, 3)*100
  
  pd <- r$x %>%
    tibble::as_tibble() %>%
    dplyr::bind_cols(tmp1 %>% dplyr::select(dplyr::all_of(c(color_label, tech_rep)))) %>%
    {.}
  
  plotlist <- list()
  titles <- list()
  
  for(i in 1:(ncol(r$x)/2)) {
    
    xvar <- names(pd)[2*i-1]
    yvar <- names(pd)[2*i]
    p1 <-
      ggplot2::ggplot(pd, ggplot2::aes(x=.data[[xvar]], y=.data[[yvar]], fill=.data[[color_label]], group=.data[[tech_rep]]))+
      ggplot2::geom_polygon(aes(fill=.data[[color_label]]), show.legend = F, alpha = 0.6)+
      #ggplot2::geom_line(aes(color=.data[[color_label]]), show.legend = F)+
      ggplot2::geom_point(shape=21, color="black", size=3, show.legend = F) +
      ggplot2::labs(fill = fill, 
                    x = paste0(xvar, " (", variance_explained[xvar], " %)"), 
                    y = paste0(yvar, " (", variance_explained[yvar], " %)"))+
      ggplot2::theme_minimal() +
      ggplot2::theme(axis.title.x = element_text(size = 10),
                     axis.title.y = element_text(size = 10),
                     axis.text.x = element_text(size = 10),
                     axis.text.y = element_text(size = 10))
    
    if (!is.numeric(tmp1[[color_label]])){
      p1 <- p1+scale_fill_brewer(palette = palette)+scale_color_brewer(palette = palette)
    } else{
      p1 <- p1+scale_fill_distiller(palette = palette)+scale_color_distiller(palette = palette)
    }
    plotlist[[length(plotlist)+1]] <- p1
    
    if (i == 1){
      p1 <-
        ggplot2::ggplot(pd, ggplot2::aes_string(x=xvar, y=yvar, fill=color_label))+
        ggplot2::geom_point(shape=21, color="#FFFFFFFF", size=3)+
        ggplot2::theme(legend.text = element_text(size=10), legend.title = element_text(size=12), legend.key=element_blank()) +
        ggplot2::guides(fill = ggplot2::guide_legend(override.aes = list(size = 3)))
      
      if (!is.numeric(tmp1[[color_label]])){
        p1 <- p1+scale_fill_brewer(palette = palette)
      } else{
        p1 <- p1+scale_fill_distiller(palette = palette)
      }
      legend <- cowplot::get_legend(p1 + ggplot2::theme(legend.box.margin = ggplot2::margin(0, 0, 0, 0)))
    }
  }
  
  p1 <- cowplot::plot_grid(plotlist = plotlist, nrow=1)
  p1 <- cowplot::plot_grid(p1, legend, rel_widths = c(3, .4))
  title <- cowplot::ggdraw() + cowplot::draw_label(paste("PCA based on", ncol(tmp2), "Features"), size = 10)
  final <- cowplot::plot_grid(title, p1, nrow=2, rel_heights = c(1, 10))
  
  return(final)
}
