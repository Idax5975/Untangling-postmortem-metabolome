---
title: "ML - PMI rat brain - validation - pos"
author: "IMML"
date: " updated : `r Sys.time()`"
output: 
  html_document:
    code_folding: hide
    theme: cosmo
    toc: yes
editor_options: 
  chunk_output_type: console
---

```{r, message=F, warning=F}

# Initialization

## Turning off warnings and messages in output

knitr::opts_chunk$set(message=F)
knitr::opts_chunk$set(warning=F)

## Loading required packages
library(tidyverse)
library(cowplot)
library(ggsci)
library(Hmisc)
library(kableExtra)
library(dplyr)
library(xlsx)
library(caret)
library(randomForest)
library(glmnet)
library(e1071)
library(ggplot2)
library(SuperLearner)
library(pROC)
library(ROCR)
library(ranger)
library(lightgbm)


## Configuration of output format etc.

options(digits = 5)        # number of digits printed by R default (vectors, data.frames, lists)
options(pillar.sigfig = 5) # number of digits printed by tibbles default.

text_base_size   <- 8   # in pt
fig.witdh        <- 200  # in mm
fig.height       <- 150  # in mm

# Set all text in plots to same size
theme_set(theme_cowplot(font_size = text_base_size, rel_small = 1, rel_tiny = 1, rel_large = 1))

# Setting output sizes for plots
knitr::opts_chunk$set(fig.width = fig.witdh/25.4)
knitr::opts_chunk$set(fig.height = fig.height/25.4)
knitr::opts_chunk$set(dpi = 108) # You need to find your minotors dpi yourself.

# Setting text size inside plots (geom_text, geom_label etc.)
ggplot_text_size <- text_base_size / ggplot2::.pt
# Now use: geom_text(..., size = ggplot_text_size)

# For saving plots!
# Use: ggsave(plot1, filename="myplot.png", width = fig.witdh, height=fig.height, units = "mm")
# Use: ggsave(plot1, filename="myplot.pdf", width = fig.witdh, height=fig.height, units = "mm")

# Changing default ggplot colours
# see ?scale_fill_continuous
options(ggplot2.continuous.fill  = scale_fill_viridis_c)    
options(ggplot2.discrete.fill    = list(ggsci::pal_locuszoom()(7)) )
options(ggplot2.continuous.colour = scale_colour_viridis_c)
options(ggplot2.discrete.colour   = list(ggsci::pal_locuszoom()(7)))

## Set locale if you want Danish/English month names etc.

#x <- Sys.setlocale(locale = "Danish_Denmark")  # For Danish axes on plot
x <- Sys.setlocale(locale = "English_Denmark")  # For English axes on plot
rm(x)


```


```{r source and wd}

setwd("O:\\HE_IFR-Student\\Laboratorie-journaler\\Ida Marie Marquart Løber\\PhD\\Data\\Data_GenomeDK\\Final_setup\\3_ML")

source("../../../../Functions_R/pca_function.R")

source("../../../../Functions_R/PCA_replicate_function_IMML.R")

```

# Load lasso data
```{r Load data}
setwd("...\3_ML")

#Loading and formatting:
Raw_data <- readxl::read_xlsx(path = "./Brain/PMI_rat_brain_lasso_batchnormalized_stable_features_pos.xlsx", sheet = 1)


Raw_data <- Raw_data[,-c(1,2,3,18)]

CAMERA_info <- Raw_data[66:nrow(Raw_data),]

Raw_data <- Raw_data[-c(66:nrow(Raw_data)),]

# Evt fjerne replicates først
Data_u_rep <- Raw_data %>%
  filter(str_detect(Unique_ID, "rep"))

Data_u_rep <- Data_u_rep[-c(7, 9, 16),]

Data_u_rep <- anti_join(Raw_data, Data_u_rep, by = "Unique_ID")

Data_u_rep <- Data_u_rep%>%
  select( -Unique_ID, -Tissue_ID, -Rat_ID, -Batch, -Type, -Type2, -Death_manner, -Room_Temperature, -Sampling_order, -PMI_group, -group_id, -Info)

Data_u_rep$Time_since_death_h <- as.numeric(Data_u_rep$Time_since_death_h)


```
# load RF data
```{r Load data}
setwd("...\3_ML")

#Loading and formatting:
Raw_data_RF <- readxl::read_xlsx(path = "./Brain/Tree_based/PMI_rat_brain_trees_batchnormalized_stable_features_pos.xlsx", sheet = 1)


Raw_data_RF <- Raw_data_RF[,-c(1,2,3,18)]

CAMERA_info <- Raw_data_RF[66:nrow(Raw_data_RF),]

Raw_data_RF <- Raw_data_RF[-c(66:nrow(Raw_data_RF)),]

# Evt fjerne replicates først
Data_u_rep_RF <- Raw_data_RF %>%
  filter(str_detect(Unique_ID, "rep"))

Data_u_rep_RF <- Data_u_rep_RF[-c(6, 12, 16),]

Data_u_rep_RF <- anti_join(Raw_data_RF, Data_u_rep_RF, by = "Unique_ID")

Data_u_rep_RF <- Data_u_rep_RF%>%
  select( -Unique_ID, -Tissue_ID, -Rat_ID, -Batch, -Type, -Type2, -Death_manner, -Room_Temperature, -Sampling_order, -PMI_group, -group_id, -Info)

Data_u_rep_RF$Time_since_death_h <- as.numeric(Data_u_rep_RF$Time_since_death_h)


```

# Load validation data and select lasso biomarkers
```{r Load validation data}
#Loading and formatting:
raw_val_data <- readxl::read_xlsx(path = "../2_Data normalization/Brain/PMI_rat_brain_validation_stable_features_normalized_batchnorm_pos.xlsx", sheet = 1)

raw_val_data <- raw_val_data[,-c(1,2)]

CAMERA_info_val <- raw_val_data[15:nrow(raw_val_data),]

raw_val_data <- raw_val_data[-c(11:nrow(raw_val_data)),-c(1)]


names <- Data_u_rep[,1:ncol(Data_u_rep)] %>% names()

val_data <- raw_val_data[, which((names(raw_val_data) %in% names)== TRUE)]


val_data$Time_since_death_h <- as.numeric(val_data$Time_since_death_h)

```
# Load validation data and select RF biomarkers
```{r Load validation data}
#Loading and formatting:
raw_val_data_RF <- readxl::read_xlsx(path = "../2_Data normalization/Brain/PMI_rat_brain_validation_stable_features_normalized_batchnorm_pos.xlsx", sheet = 1)

raw_val_data_RF <- raw_val_data_RF[,-c(1,2)]

CAMERA_info_val_RF <- raw_val_data_RF[15:nrow(raw_val_data_RF),]

raw_val_data_RF <- raw_val_data_RF[-c(11:nrow(raw_val_data_RF)),-c(1)]


names_RF <- Data_u_rep_RF[,1:ncol(Data_u_rep_RF)] %>% names()

val_data_RF <- raw_val_data_RF[, which((names(raw_val_data_RF) %in% names_RF)== TRUE)]


val_data_RF$Time_since_death_h <- as.numeric(val_data_RF$Time_since_death_h)

```



```{r Lasso - LOROCV}
#LASSO - Leave one rat out cross validation

lambda.grid <- expand.grid(alpha=1, lambda=10^seq(-5,0, length=50))



x_train <- Data_u_rep %>% select(-Sample_ID, -Time_since_death_h)%>% as_tibble()
x_train <- lapply(x_train, as.numeric)%>%
  as.data.frame()

y_train <- Data_u_rep$Time_since_death_h

set.seed(123)
lasso.model.full <- caret::train(x = x_train, y = y_train,
                         method = "glmnet",
                         tuneGrid = lambda.grid, 
                         trControl = caret::trainControl(method="cv")
                         )

x_val <- val_data[,3:ncol(val_data)]

x_val <- lapply(x_val, as.numeric)%>%
  as.data.frame()


validation <- predict(object = lasso.model.full, newdata = x_val, type = "raw")

result <- list()
result[[length(result)+1]] <- tibble("predicted_PMI"= validation, "observed_PMI"=val_data$Time_since_death_h)
  

result_val <- bind_rows(result)

result_val <- cbind(val_data$Sample_ID, result_val)

result_val <- result_val%>%
  mutate(`Difference (h)` = result_val$observed_PMI - result_val$predicted_PMI)

print(result_val)
```


```{r Random Forest}
#RF


tune_grid <-  expand.grid(mtry=15, 
                         splitrule=c("variance", "extratrees"), 
                         min.node.size=c(3,5,7))

#index=folds fjernet - er den meget vigtig her?
train_control <- caret::trainControl(method="cv", verboseIter = F)

x_train_RF <- Data_u_rep_RF %>% select(-Sample_ID, -Time_since_death_h)%>% as_tibble()
x_train_RF <- lapply(x_train_RF, as.numeric)%>%
  as.data.frame()

y_train_RF <- Data_u_rep_RF$Time_since_death_h


set.seed(123)   
RF.model.full <- caret::train(x = as.matrix(x_train_RF), 
                           y = y_train_RF, 
                    tuneGrid = tune_grid,
                   trControl = train_control,
                      method = "ranger"
                  )


x_val_RF <- val_data_RF[,3:ncol(val_data_RF)]

x_val_RF <- lapply(x_val_RF, as.numeric)%>%
  as.data.frame()


validation_RF <- predict(object = RF.model.full, newdata = x_val_RF, type = "raw")

result_RF <- list()
result_RF[[length(result_RF)+1]] <- tibble("predicted_PMI"= validation_RF, "observed_PMI"=val_data_RF$Time_since_death_h)
  

result_val_RF <- bind_rows(result_RF)

result_val_RF <- cbind(val_data_RF$Sample_ID, result_val_RF)

result_val_RF <- result_val_RF%>%
  mutate(`Difference (h)` = result_val_RF$observed_PMI - result_val_RF$predicted_PMI)

print(result_val_RF)

    
```



```{r save result}

df_lasso <- cbind(result_val, raw_val_data)

df_lasso <- df_lasso[,-1]

df_lasso$method <-c("Lasso")

df_lasso <- df_lasso%>%
  select(method, everything())




df_Rf <- cbind(result_val_RF, raw_val_data_RF)

df_Rf <- df_Rf[,-1]

df_Rf$method <-c("Random Forest")

df_Rf <- df_Rf%>%
  select(method, everything())


df <- rbind(df_lasso, df_Rf)

write_tsv(x = df, file="./Brain/results_brain_validation_imp_stable_features_norm_batchnorm_lasso_RF.tsv")


```


