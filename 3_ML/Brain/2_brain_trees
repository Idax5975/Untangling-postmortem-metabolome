---
title: "ML - PMI rat brain - stable features - treebased - pos"
author: "IMML"
date: " updated : `r Sys.time()`"
output: 
  html_document:
    code_folding: hide
    theme: cosmo
    toc: yes
editor_options: 
  chunk_output_type: console
---

# Init

```{r, message=F, warning=F}

library(tidyverse)
library(cowplot)
library(ggsci)
library(randomForest)
library(caret)
library(xlsx)

knitr::opts_chunk$set(message=F)
knitr::opts_chunk$set(warning=F)

options(digits = 5)
options(pillar.sigfig = 5)

text_base_size   <- 12
fig.witdh        <- 180
fig.height       <- 120

theme_set(theme_cowplot(font_size = text_base_size, rel_small = 1, rel_tiny = 1, rel_large = 1))

knitr::opts_chunk$set(fig.width = fig.witdh/25.4)
knitr::opts_chunk$set(fig.height = fig.height/25.4)
knitr::opts_chunk$set(dpi = 108) # You need to find your minotors dpi yourself.

ggplot_text_size <- text_base_size / ggplot2::.pt

options(ggplot2.continuous.fill  = scale_fill_viridis_c)    
options(ggplot2.discrete.fill    = list(ggsci::pal_locuszoom()(7)) )
options(ggplot2.continuous.colour = scale_colour_viridis_c)
options(ggplot2.discrete.colour   = list(ggsci::pal_locuszoom()(7)))

x <- Sys.setlocale(locale = "English_Denmark")  # For English axes on plot
rm(x)

```

# Reading data

```{r load data}

raw_data <- readxl::read_xlsx(path = "...\2_Data normalization/Brain/PMI_rat_brain_stable_features_normalized_batchnorm_pos.xlsx", sheet = 1)

raw_data <- raw_data[,-1]

CAMERA_info <- raw_data[80:nrow(raw_data),]

raw_data <- raw_data[-c(80:nrow(raw_data)),]

raw_data <- raw_data %>% 
  mutate(pmi = Time_since_death_h %>% as.numeric()) %>%
  select(pmi, everything()) %>%
  drop_na(pmi) %>% # Removes QC samples
  sample_frac(size = 1) %>%
  {.}

feature_names <- raw_data %>% select(starts_with("M")) %>% names()

raw_data %>% 
  select(all_of(feature_names)) %>% 
  mutate(across(starts_with("M"), as.numeric))

raw_data <- raw_data %>% mutate(across(starts_with("M"), as.numeric))

```

# Nested leave two rats out using trees

```{r}

r <- list()

rats <- unique(raw_data$Sample_ID)

set.seed(0)
i=1
j=1
for (i in 1:length(rats)) {
  rat1_id <- rats[i]
  inner_data <- raw_data %>% filter(Sample_ID != rat1_id)
  cat(date(), " Leaving rat ", i, "/", length(rats), " (",rat1_id,") out\n", sep="",
      file = "log_brain_trees.txt", append = T)
  inner_rats <- unique(inner_data$Sample_ID)
  for (j in 1:length(inner_rats)) {
    rat2_id <- inner_rats[j]
    # Data without the two rats
    x <- inner_data %>% filter(Sample_ID != rat2_id) 
    x_train <- x %>% select(all_of(feature_names))
    y_train <- x %>% pull(pmi)
    #10-fold cv to speed up and tune parameters
    folds <- caret::createMultiFolds(1:nrow(x), k = 10, times=1)
    # Data with only the two rats
    x <- raw_data %>% filter(Sample_ID == rat2_id)
    x_test <- x %>% select(all_of(feature_names))
    y_test <- x %>% select(!all_of(feature_names))

    train_control <- caret::trainControl(method="cv", index=folds, verboseIter = F)

    #
    # Select important features using everything except 2 rats
    #
    print(paste(Sys.time(), "Fitting to get top 15",i,j))

    model1 <- caret::train(x = as.matrix(x_train), 
                           y = y_train, 
                  tuneLength = 5,
                   trControl = train_control,
                      method = "ranger",
                  importance = 'permutation' # permutation/impurity
                  )
    #
    # Train model with only top 15
    #
    print(paste(Sys.time(), "Fitting using top 15 ",i,j))
    
    top15_important_features <- varImp(model1)$importance %>% 
      tibble::rownames_to_column() %>%
      filter(Overall > 0) %>%
      slice_max(Overall, n=15) %>%
      pull(rowname)

    x_train2 <- x_train %>% select(all_of(top15_important_features))

    # Now tell ranger to use all 15 features, but tune the rest of the parameters
    tune_grid <-  expand.grid(mtry=15, 
                         splitrule=c("variance", "extratrees"), 
                         min.node.size=c(3,5,7))
    
    model2 <- caret::train(x = as.matrix(x_train2), 
                           y = y_train, 
                    tuneGrid = tune_grid,
                   trControl = train_control,
                      method = "ranger"
                  )

    r[[length(r)+1]] <- y_test %>% 
      mutate(predicted = predict(model2, newdata = x_test %>% as.matrix()),
             rat1 = rat1_id, rat2=rat2_id, 
             method="Random Forest")
  }
}


```

## Saving

```{r}

pd <- bind_rows(r)


write_tsv(x = pd, file=".\Brain\results_brain_trees_imp_batchnorm_features_nested_leave_rat_out.tsv")


data <- raw_data %>% select(all_of(top15_important_features)) %>% as.matrix()

data <- cbind(raw_data[,1:17], data)



C_info <- CAMERA_info[, which((names(CAMERA_info) %in% top15_important_features)== TRUE)]
C_info <- cbind(CAMERA_info[,1:16], C_info)

data <- plyr::rbind.fill(data, C_info)



write.xlsx(data, "..\Brain\PMI_rat_brain_trees_batchnormalized_stable_features_pos.xlsx")


```


